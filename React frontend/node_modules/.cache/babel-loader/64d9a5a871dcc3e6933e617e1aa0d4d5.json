{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.dangerouslyDisableDefaultSrc = exports.getDefaultDirectives = void 0;\nconst dangerouslyDisableDefaultSrc = Symbol(\"dangerouslyDisableDefaultSrc\");\nexports.dangerouslyDisableDefaultSrc = dangerouslyDisableDefaultSrc;\nconst DEFAULT_DIRECTIVES = {\n  \"default-src\": [\"'self'\"],\n  \"base-uri\": [\"'self'\"],\n  \"block-all-mixed-content\": [],\n  \"font-src\": [\"'self'\", \"https:\", \"data:\"],\n  \"frame-ancestors\": [\"'self'\"],\n  \"img-src\": [\"'self'\", \"data:\"],\n  \"object-src\": [\"'none'\"],\n  \"script-src\": [\"'self'\"],\n  \"script-src-attr\": [\"'none'\"],\n  \"style-src\": [\"'self'\", \"https:\", \"'unsafe-inline'\"],\n  \"upgrade-insecure-requests\": []\n};\n\nconst getDefaultDirectives = () => Object.assign({}, DEFAULT_DIRECTIVES);\n\nexports.getDefaultDirectives = getDefaultDirectives;\n\nconst dashify = str => str.replace(/[A-Z]/g, capitalLetter => \"-\" + capitalLetter.toLowerCase());\n\nconst isDirectiveValueInvalid = directiveValue => /;|,/.test(directiveValue);\n\nconst has = (obj, key) => Object.prototype.hasOwnProperty.call(obj, key);\n\nfunction normalizeDirectives(options) {\n  const defaultDirectives = getDefaultDirectives();\n  const {\n    useDefaults = false,\n    directives: rawDirectives = defaultDirectives\n  } = options;\n  const result = new Map();\n  const directiveNamesSeen = new Set();\n  const directivesExplicitlyDisabled = new Set();\n\n  for (const rawDirectiveName in rawDirectives) {\n    if (!has(rawDirectives, rawDirectiveName)) {\n      continue;\n    }\n\n    if (rawDirectiveName.length === 0 || /[^a-zA-Z0-9-]/.test(rawDirectiveName)) {\n      throw new Error(`Content-Security-Policy received an invalid directive name ${JSON.stringify(rawDirectiveName)}`);\n    }\n\n    const directiveName = dashify(rawDirectiveName);\n\n    if (directiveNamesSeen.has(directiveName)) {\n      throw new Error(`Content-Security-Policy received a duplicate directive ${JSON.stringify(directiveName)}`);\n    }\n\n    directiveNamesSeen.add(directiveName);\n    const rawDirectiveValue = rawDirectives[rawDirectiveName];\n    let directiveValue;\n\n    if (rawDirectiveValue === null) {\n      if (directiveName === \"default-src\") {\n        throw new Error(\"Content-Security-Policy needs a default-src but it was set to `null`. If you really want to disable it, set it to `contentSecurityPolicy.dangerouslyDisableDefaultSrc`.\");\n      }\n\n      directivesExplicitlyDisabled.add(directiveName);\n      continue;\n    } else if (typeof rawDirectiveValue === \"string\") {\n      directiveValue = [rawDirectiveValue];\n    } else if (!rawDirectiveValue) {\n      throw new Error(`Content-Security-Policy received an invalid directive value for ${JSON.stringify(directiveName)}`);\n    } else if (rawDirectiveValue === dangerouslyDisableDefaultSrc) {\n      if (directiveName === \"default-src\") {\n        directivesExplicitlyDisabled.add(\"default-src\");\n        continue;\n      } else {\n        throw new Error(`Content-Security-Policy: tried to disable ${JSON.stringify(directiveName)} as if it were default-src; simply omit the key`);\n      }\n    } else {\n      directiveValue = rawDirectiveValue;\n    }\n\n    for (const element of directiveValue) {\n      if (typeof element === \"string\" && isDirectiveValueInvalid(element)) {\n        throw new Error(`Content-Security-Policy received an invalid directive value for ${JSON.stringify(directiveName)}`);\n      }\n    }\n\n    result.set(directiveName, directiveValue);\n  }\n\n  if (useDefaults) {\n    Object.entries(defaultDirectives).forEach(([defaultDirectiveName, defaultDirectiveValue]) => {\n      if (!result.has(defaultDirectiveName) && !directivesExplicitlyDisabled.has(defaultDirectiveName)) {\n        result.set(defaultDirectiveName, defaultDirectiveValue);\n      }\n    });\n  }\n\n  if (!result.size) {\n    throw new Error(\"Content-Security-Policy has no directives. Either set some or disable the header\");\n  }\n\n  if (!result.has(\"default-src\") && !directivesExplicitlyDisabled.has(\"default-src\")) {\n    throw new Error(\"Content-Security-Policy needs a default-src but none was provided. If you really want to disable it, set it to `contentSecurityPolicy.dangerouslyDisableDefaultSrc`.\");\n  }\n\n  return result;\n}\n\nfunction getHeaderValue(req, res, normalizedDirectives) {\n  let err;\n  const result = [];\n  normalizedDirectives.forEach((rawDirectiveValue, directiveName) => {\n    let directiveValue = \"\";\n\n    for (const element of rawDirectiveValue) {\n      directiveValue += \" \" + (element instanceof Function ? element(req, res) : element);\n    }\n\n    if (!directiveValue) {\n      result.push(directiveName);\n    } else if (isDirectiveValueInvalid(directiveValue)) {\n      err = new Error(`Content-Security-Policy received an invalid directive value for ${JSON.stringify(directiveName)}`);\n    } else {\n      result.push(`${directiveName}${directiveValue}`);\n    }\n  });\n  return err ? err : result.join(\";\");\n}\n\nconst contentSecurityPolicy = function contentSecurityPolicy(options = {}) {\n  if (\"loose\" in options) {\n    console.warn(\"Content-Security-Policy middleware no longer needs the `loose` parameter. You should remove it.\");\n  }\n\n  if (\"setAllHeaders\" in options) {\n    console.warn(\"Content-Security-Policy middleware no longer supports the `setAllHeaders` parameter. See <https://github.com/helmetjs/helmet/wiki/Setting-legacy-Content-Security-Policy-headers-in-Helmet-4>.\");\n  }\n\n  ;\n  [\"disableAndroid\", \"browserSniff\"].forEach(deprecatedOption => {\n    if (deprecatedOption in options) {\n      console.warn(`Content-Security-Policy middleware no longer does browser sniffing, so you can remove the \\`${deprecatedOption}\\` option. See <https://github.com/helmetjs/csp/issues/97> for discussion.`);\n    }\n  });\n  const headerName = options.reportOnly ? \"Content-Security-Policy-Report-Only\" : \"Content-Security-Policy\";\n  const normalizedDirectives = normalizeDirectives(options);\n  return function contentSecurityPolicyMiddleware(req, res, next) {\n    const result = getHeaderValue(req, res, normalizedDirectives);\n\n    if (result instanceof Error) {\n      next(result);\n    } else {\n      res.setHeader(headerName, result);\n      next();\n    }\n  };\n};\n\ncontentSecurityPolicy.getDefaultDirectives = getDefaultDirectives;\ncontentSecurityPolicy.dangerouslyDisableDefaultSrc = dangerouslyDisableDefaultSrc;\nmodule.exports = contentSecurityPolicy;\nexports.default = contentSecurityPolicy;","map":{"version":3,"sources":["C:/Users/Yoni/Desktop/maruf/movie/node_modules/helmet/dist/middlewares/content-security-policy/index.js"],"names":["Object","defineProperty","exports","value","dangerouslyDisableDefaultSrc","getDefaultDirectives","Symbol","DEFAULT_DIRECTIVES","assign","dashify","str","replace","capitalLetter","toLowerCase","isDirectiveValueInvalid","directiveValue","test","has","obj","key","prototype","hasOwnProperty","call","normalizeDirectives","options","defaultDirectives","useDefaults","directives","rawDirectives","result","Map","directiveNamesSeen","Set","directivesExplicitlyDisabled","rawDirectiveName","length","Error","JSON","stringify","directiveName","add","rawDirectiveValue","element","set","entries","forEach","defaultDirectiveName","defaultDirectiveValue","size","getHeaderValue","req","res","normalizedDirectives","err","Function","push","join","contentSecurityPolicy","console","warn","deprecatedOption","headerName","reportOnly","contentSecurityPolicyMiddleware","next","setHeader","module","default"],"mappings":"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","sourcesContent":["\"use strict\"\nObject.defineProperty(exports, \"__esModule\", { value: true })\nexports.dangerouslyDisableDefaultSrc = exports.getDefaultDirectives = void 0\nconst dangerouslyDisableDefaultSrc = Symbol(\"dangerouslyDisableDefaultSrc\")\nexports.dangerouslyDisableDefaultSrc = dangerouslyDisableDefaultSrc\nconst DEFAULT_DIRECTIVES = {\n\t\"default-src\": [\"'self'\"],\n\t\"base-uri\": [\"'self'\"],\n\t\"block-all-mixed-content\": [],\n\t\"font-src\": [\"'self'\", \"https:\", \"data:\"],\n\t\"frame-ancestors\": [\"'self'\"],\n\t\"img-src\": [\"'self'\", \"data:\"],\n\t\"object-src\": [\"'none'\"],\n\t\"script-src\": [\"'self'\"],\n\t\"script-src-attr\": [\"'none'\"],\n\t\"style-src\": [\"'self'\", \"https:\", \"'unsafe-inline'\"],\n\t\"upgrade-insecure-requests\": []\n}\nconst getDefaultDirectives = () => Object.assign({}, DEFAULT_DIRECTIVES)\nexports.getDefaultDirectives = getDefaultDirectives\nconst dashify = str => str.replace(/[A-Z]/g, capitalLetter => \"-\" + capitalLetter.toLowerCase())\nconst isDirectiveValueInvalid = directiveValue => /;|,/.test(directiveValue)\nconst has = (obj, key) => Object.prototype.hasOwnProperty.call(obj, key)\nfunction normalizeDirectives(options) {\n\tconst defaultDirectives = getDefaultDirectives()\n\tconst { useDefaults = false, directives: rawDirectives = defaultDirectives } = options\n\tconst result = new Map()\n\tconst directiveNamesSeen = new Set()\n\tconst directivesExplicitlyDisabled = new Set()\n\tfor (const rawDirectiveName in rawDirectives) {\n\t\tif (!has(rawDirectives, rawDirectiveName)) {\n\t\t\tcontinue\n\t\t}\n\t\tif (rawDirectiveName.length === 0 || /[^a-zA-Z0-9-]/.test(rawDirectiveName)) {\n\t\t\tthrow new Error(`Content-Security-Policy received an invalid directive name ${JSON.stringify(rawDirectiveName)}`)\n\t\t}\n\t\tconst directiveName = dashify(rawDirectiveName)\n\t\tif (directiveNamesSeen.has(directiveName)) {\n\t\t\tthrow new Error(`Content-Security-Policy received a duplicate directive ${JSON.stringify(directiveName)}`)\n\t\t}\n\t\tdirectiveNamesSeen.add(directiveName)\n\t\tconst rawDirectiveValue = rawDirectives[rawDirectiveName]\n\t\tlet directiveValue\n\t\tif (rawDirectiveValue === null) {\n\t\t\tif (directiveName === \"default-src\") {\n\t\t\t\tthrow new Error(\"Content-Security-Policy needs a default-src but it was set to `null`. If you really want to disable it, set it to `contentSecurityPolicy.dangerouslyDisableDefaultSrc`.\")\n\t\t\t}\n\t\t\tdirectivesExplicitlyDisabled.add(directiveName)\n\t\t\tcontinue\n\t\t} else if (typeof rawDirectiveValue === \"string\") {\n\t\t\tdirectiveValue = [rawDirectiveValue]\n\t\t} else if (!rawDirectiveValue) {\n\t\t\tthrow new Error(`Content-Security-Policy received an invalid directive value for ${JSON.stringify(directiveName)}`)\n\t\t} else if (rawDirectiveValue === dangerouslyDisableDefaultSrc) {\n\t\t\tif (directiveName === \"default-src\") {\n\t\t\t\tdirectivesExplicitlyDisabled.add(\"default-src\")\n\t\t\t\tcontinue\n\t\t\t} else {\n\t\t\t\tthrow new Error(`Content-Security-Policy: tried to disable ${JSON.stringify(directiveName)} as if it were default-src; simply omit the key`)\n\t\t\t}\n\t\t} else {\n\t\t\tdirectiveValue = rawDirectiveValue\n\t\t}\n\t\tfor (const element of directiveValue) {\n\t\t\tif (typeof element === \"string\" && isDirectiveValueInvalid(element)) {\n\t\t\t\tthrow new Error(`Content-Security-Policy received an invalid directive value for ${JSON.stringify(directiveName)}`)\n\t\t\t}\n\t\t}\n\t\tresult.set(directiveName, directiveValue)\n\t}\n\tif (useDefaults) {\n\t\tObject.entries(defaultDirectives).forEach(([defaultDirectiveName, defaultDirectiveValue]) => {\n\t\t\tif (!result.has(defaultDirectiveName) && !directivesExplicitlyDisabled.has(defaultDirectiveName)) {\n\t\t\t\tresult.set(defaultDirectiveName, defaultDirectiveValue)\n\t\t\t}\n\t\t})\n\t}\n\tif (!result.size) {\n\t\tthrow new Error(\"Content-Security-Policy has no directives. Either set some or disable the header\")\n\t}\n\tif (!result.has(\"default-src\") && !directivesExplicitlyDisabled.has(\"default-src\")) {\n\t\tthrow new Error(\"Content-Security-Policy needs a default-src but none was provided. If you really want to disable it, set it to `contentSecurityPolicy.dangerouslyDisableDefaultSrc`.\")\n\t}\n\treturn result\n}\nfunction getHeaderValue(req, res, normalizedDirectives) {\n\tlet err\n\tconst result = []\n\tnormalizedDirectives.forEach((rawDirectiveValue, directiveName) => {\n\t\tlet directiveValue = \"\"\n\t\tfor (const element of rawDirectiveValue) {\n\t\t\tdirectiveValue += \" \" + (element instanceof Function ? element(req, res) : element)\n\t\t}\n\t\tif (!directiveValue) {\n\t\t\tresult.push(directiveName)\n\t\t} else if (isDirectiveValueInvalid(directiveValue)) {\n\t\t\terr = new Error(`Content-Security-Policy received an invalid directive value for ${JSON.stringify(directiveName)}`)\n\t\t} else {\n\t\t\tresult.push(`${directiveName}${directiveValue}`)\n\t\t}\n\t})\n\treturn err ? err : result.join(\";\")\n}\nconst contentSecurityPolicy = function contentSecurityPolicy(options = {}) {\n\tif (\"loose\" in options) {\n\t\tconsole.warn(\"Content-Security-Policy middleware no longer needs the `loose` parameter. You should remove it.\")\n\t}\n\tif (\"setAllHeaders\" in options) {\n\t\tconsole.warn(\"Content-Security-Policy middleware no longer supports the `setAllHeaders` parameter. See <https://github.com/helmetjs/helmet/wiki/Setting-legacy-Content-Security-Policy-headers-in-Helmet-4>.\")\n\t}\n\t;[\"disableAndroid\", \"browserSniff\"].forEach(deprecatedOption => {\n\t\tif (deprecatedOption in options) {\n\t\t\tconsole.warn(`Content-Security-Policy middleware no longer does browser sniffing, so you can remove the \\`${deprecatedOption}\\` option. See <https://github.com/helmetjs/csp/issues/97> for discussion.`)\n\t\t}\n\t})\n\tconst headerName = options.reportOnly ? \"Content-Security-Policy-Report-Only\" : \"Content-Security-Policy\"\n\tconst normalizedDirectives = normalizeDirectives(options)\n\treturn function contentSecurityPolicyMiddleware(req, res, next) {\n\t\tconst result = getHeaderValue(req, res, normalizedDirectives)\n\t\tif (result instanceof Error) {\n\t\t\tnext(result)\n\t\t} else {\n\t\t\tres.setHeader(headerName, result)\n\t\t\tnext()\n\t\t}\n\t}\n}\ncontentSecurityPolicy.getDefaultDirectives = getDefaultDirectives\ncontentSecurityPolicy.dangerouslyDisableDefaultSrc = dangerouslyDisableDefaultSrc\nmodule.exports = contentSecurityPolicy\nexports.default = contentSecurityPolicy\n"]},"metadata":{},"sourceType":"script"}